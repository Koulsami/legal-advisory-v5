# Legal Advisory System v5.0 - Docker Compose Configuration
# Production-ready stack with optional services

version: '3.8'

services:
  # Main API Service
  api:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: legal-advisory-api
    ports:
      - "${PORT:-8000}:8000"
    environment:
      - PYTHONPATH=/app
      - ENVIRONMENT=${ENVIRONMENT:-production}
      - LOG_LEVEL=${LOG_LEVEL:-info}
      - CORS_ORIGINS=${CORS_ORIGINS:-*}
      # Database (optional - uncomment when PostgreSQL is integrated)
      # - DATABASE_URL=postgresql://legaluser:legalpass@postgres:5432/legaldb
      # Redis (optional - uncomment when Redis is integrated)
      # - REDIS_URL=redis://redis:6379/0
    depends_on:
      - postgres
      - redis
    restart: unless-stopped
    networks:
      - legal-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    # Resource limits
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 128M

  # PostgreSQL Database (Optional - for future persistence)
  postgres:
    image: postgres:16-alpine
    container_name: legal-advisory-postgres
    environment:
      - POSTGRES_USER=${POSTGRES_USER:-legaluser}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-legalpass}
      - POSTGRES_DB=${POSTGRES_DB:-legaldb}
    volumes:
      - postgres-data:/var/lib/postgresql/data
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    restart: unless-stopped
    networks:
      - legal-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-legaluser}"]
      interval: 10s
      timeout: 5s
      retries: 5
    # Comment out if not using PostgreSQL yet
    profiles:
      - with-db

  # Redis Cache (Optional - for future session caching)
  redis:
    image: redis:7-alpine
    container_name: legal-advisory-redis
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    volumes:
      - redis-data:/data
    ports:
      - "${REDIS_PORT:-6379}:6379"
    restart: unless-stopped
    networks:
      - legal-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
    # Comment out if not using Redis yet
    profiles:
      - with-cache

  # Nginx Reverse Proxy (Optional - for production)
  nginx:
    image: nginx:alpine
    container_name: legal-advisory-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - api
    restart: unless-stopped
    networks:
      - legal-network
    profiles:
      - with-nginx

volumes:
  postgres-data:
    driver: local
  redis-data:
    driver: local

networks:
  legal-network:
    driver: bridge
