name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  release:
    types: [ published ]

env:
  PYTHON_VERSION: '3.12'
  DOCKER_IMAGE: legal-advisory
  DOCKER_TAG: ${{ github.sha }}

jobs:
  # Job 1: Run Tests
  test:
    name: Run Tests
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov pytest-asyncio

      - name: Run tests
        env:
          PYTHONPATH: ${{ github.workspace }}
        run: |
          pytest tests/ --ignore=tests/_archived -v --cov=backend --cov-report=xml --cov-report=term

      - name: Upload coverage reports
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

  # Job 2: Security Scan
  security:
    name: Security Scan
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install safety bandit

      - name: Run Safety check
        run: |
          safety check --json || true

      - name: Run Bandit security scan
        run: |
          bandit -r backend/ -f json -o bandit-report.json || true

      - name: Upload Bandit report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: bandit-report
          path: bandit-report.json

  # Job 3: Code Quality
  quality:
    name: Code Quality
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install mypy pylint black isort

      - name: Run Black (code formatting check)
        run: |
          black --check backend/ tests/ || true

      - name: Run isort (import sorting check)
        run: |
          isort --check-only backend/ tests/ || true

      - name: Run mypy (type checking)
        run: |
          mypy backend/ --ignore-missing-imports || true

      - name: Run pylint
        run: |
          pylint backend/ --exit-zero

  # Job 4: Build Docker Image
  build:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: [ test, security, quality ]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: false
          tags: ${{ env.DOCKER_IMAGE }}:${{ env.DOCKER_TAG }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          outputs: type=docker,dest=/tmp/image.tar

      - name: Upload Docker image artifact
        uses: actions/upload-artifact@v4
        with:
          name: docker-image
          path: /tmp/image.tar
          retention-days: 1

  # Job 5: Test Docker Image
  test-docker:
    name: Test Docker Image
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download Docker image
        uses: actions/download-artifact@v4
        with:
          name: docker-image
          path: /tmp

      - name: Load Docker image
        run: |
          docker load --input /tmp/image.tar

      - name: Run container
        run: |
          docker run -d \
            --name test-container \
            -p 8000:8000 \
            ${{ env.DOCKER_IMAGE }}:${{ env.DOCKER_TAG }}

      - name: Wait for container to be ready
        run: |
          timeout 30 sh -c 'until curl -f http://localhost:8000/health; do sleep 1; done'

      - name: Test health endpoint
        run: |
          curl -f http://localhost:8000/health | grep -q "healthy"

      - name: Test API documentation
        run: |
          curl -f http://localhost:8000/docs | grep -q "swagger"

      - name: Show container logs
        if: always()
        run: |
          docker logs test-container

      - name: Stop container
        if: always()
        run: |
          docker stop test-container
          docker rm test-container

  # Job 6: Deploy (only on main branch push or release)
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    needs: [ test, build, test-docker ]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download Docker image
        uses: actions/download-artifact@v4
        with:
          name: docker-image
          path: /tmp

      - name: Load Docker image
        run: |
          docker load --input /tmp/image.tar

      # Example: Deploy to Docker Hub
      - name: Login to Docker Hub
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Tag and push to Docker Hub
        if: github.event_name != 'pull_request'
        run: |
          docker tag ${{ env.DOCKER_IMAGE }}:${{ env.DOCKER_TAG }} \
            ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.DOCKER_IMAGE }}:latest
          docker tag ${{ env.DOCKER_IMAGE }}:${{ env.DOCKER_TAG }} \
            ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.DOCKER_IMAGE }}:${{ github.sha }}
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.DOCKER_IMAGE }}:latest
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.DOCKER_IMAGE }}:${{ github.sha }}

      # Example: Deploy to production server via SSH
      # - name: Deploy to production
      #   uses: appleboy/ssh-action@master
      #   with:
      #     host: ${{ secrets.DEPLOY_HOST }}
      #     username: ${{ secrets.DEPLOY_USER }}
      #     key: ${{ secrets.DEPLOY_KEY }}
      #     script: |
      #       cd /opt/legal-advisory-v5
      #       git pull
      #       docker-compose pull
      #       docker-compose up -d --build

  # Job 7: Create Release (only on tag push)
  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [ test, build ]
    if: startsWith(github.ref, 'refs/tags/v')

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Create Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          body: |
            Legal Advisory System ${{ github.ref }}

            ## Changes
            See CHANGELOG.md for details.

            ## Docker Image
            ```bash
            docker pull ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.DOCKER_IMAGE }}:${{ github.ref_name }}
            ```
          draft: false
          prerelease: false
