name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

jobs:
  # ============================================
  # LINTING AND CODE QUALITY
  # ============================================
  lint:
    name: Lint Code
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.12"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install ruff mypy black isort

      - name: Run Black (formatting check)
        run: black --check backend/ tests/
        continue-on-error: true

      - name: Run isort (import sorting check)
        run: isort --check-only backend/ tests/
        continue-on-error: true

      - name: Run Ruff (linting)
        run: ruff check backend/ tests/
        continue-on-error: true

      - name: Run MyPy (type checking)
        run: mypy backend/ --ignore-missing-imports
        continue-on-error: true

  # ============================================
  # UNIT TESTS
  # ============================================
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.11", "3.12"]

    steps:
      - uses: actions/checkout@v3

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov pytest-asyncio

      - name: Run unit tests with coverage
        env:
          PYTHONPATH: ${{ github.workspace }}
        run: |
          pytest tests/unit/ \
            tests/common_services/ \
            tests/hybrid_ai/ \
            tests/utils/ \
            -v \
            --cov=backend \
            --cov-report=xml \
            --cov-report=term-missing

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-unit-tests
        continue-on-error: true

  # ============================================
  # MODULE TESTS
  # ============================================
  module-tests:
    name: Module Tests
    runs-on: ubuntu-latest
    needs: [unit-tests]

    steps:
      - uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.12"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-asyncio

      - name: Run module tests
        env:
          PYTHONPATH: ${{ github.workspace }}
        run: |
          pytest tests/modules/ -v

  # ============================================
  # CONVERSATION TESTS
  # ============================================
  conversation-tests:
    name: Conversation Tests
    runs-on: ubuntu-latest
    needs: [unit-tests]

    steps:
      - uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.12"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-asyncio

      - name: Run conversation tests
        env:
          PYTHONPATH: ${{ github.workspace }}
        run: |
          pytest tests/conversation/ -v

  # ============================================
  # EMULATOR TESTS
  # ============================================
  emulator-tests:
    name: Emulator Tests
    runs-on: ubuntu-latest
    needs: [unit-tests]

    steps:
      - uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.12"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-asyncio

      - name: Run emulator tests
        env:
          PYTHONPATH: ${{ github.workspace }}
        run: |
          pytest tests/emulators/ -v

  # ============================================
  # INTEGRATION TESTS
  # ============================================
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [unit-tests, module-tests, conversation-tests, emulator-tests]

    steps:
      - uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.12"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-asyncio pytest-timeout

      - name: Run integration tests
        env:
          PYTHONPATH: ${{ github.workspace }}
        run: |
          pytest tests/integration/ \
            -v \
            --timeout=300

  # ============================================
  # SECURITY TESTS
  # ============================================
  security-tests:
    name: Security Audit
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.12"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-asyncio safety bandit

      - name: Run security tests
        env:
          PYTHONPATH: ${{ github.workspace }}
        run: |
          pytest tests/security/ -v

      - name: Run Safety check (dependency vulnerabilities)
        run: safety check --json
        continue-on-error: true

      - name: Run Bandit (security linter)
        run: bandit -r backend/ -f json -o bandit-report.json
        continue-on-error: true

      - name: Upload Bandit report
        uses: actions/upload-artifact@v3
        with:
          name: bandit-report
          path: bandit-report.json
        continue-on-error: true

  # ============================================
  # BUILD TEST (Docker)
  # ============================================
  build-test:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: [integration-tests]

    steps:
      - uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: false
          tags: legal-advisory-system:test
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Test Docker image
        run: |
          docker run -d -p 8000:8000 \
            -e PYTHONPATH=/app \
            --name test-container \
            legal-advisory-system:test

          # Wait for container to be ready
          sleep 10

          # Test health endpoint
          curl -f http://localhost:8000/health || exit 1

          # Cleanup
          docker stop test-container
          docker rm test-container

  # ============================================
  # ALL TESTS PASSED - SUMMARY
  # ============================================
  all-tests-passed:
    name: All Tests Passed âœ…
    runs-on: ubuntu-latest
    needs:
      [
        lint,
        unit-tests,
        module-tests,
        conversation-tests,
        emulator-tests,
        integration-tests,
        security-tests,
        build-test,
      ]

    steps:
      - name: Success
        run: |
          echo "ðŸŽ‰ All tests passed successfully!"
          echo "âœ… Linting: Passed"
          echo "âœ… Unit Tests: Passed"
          echo "âœ… Module Tests: Passed"
          echo "âœ… Conversation Tests: Passed"
          echo "âœ… Emulator Tests: Passed"
          echo "âœ… Integration Tests: Passed"
          echo "âœ… Security Tests: Passed"
          echo "âœ… Docker Build: Passed"
          echo ""
          echo "ðŸš€ Ready for deployment to production!"

  # ============================================
  # DEPLOY TO RAILWAY (only on main branch push)
  # ============================================
  deploy-railway:
    name: Deploy to Railway
    runs-on: ubuntu-latest
    needs: [all-tests-passed]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
      - uses: actions/checkout@v3

      - name: Deploy to Railway
        run: |
          echo "ðŸš‚ Triggering Railway deployment..."
          echo "Railway will automatically deploy from the main branch"
          echo "Monitor deployment at: https://railway.app"

      - name: Notify success
        run: |
          echo "âœ… Deployment triggered successfully!"
          echo "Check Railway dashboard for deployment status"
