# Pytest configuration for Legal Advisory System v5.0

[pytest]
# Directories to search for tests
testpaths = tests

# Python files pattern
python_files = test_*.py

# Python classes pattern
python_classes = Test*

# Python functions pattern
python_functions = test_*

# Minimum version
minversion = 7.0

# Add options
addopts =
    # Verbose output
    -v
    # Show local variables in tracebacks
    -l
    # Show summary of all test outcomes
    -ra
    # Strict markers (fail on unknown markers)
    --strict-markers
    # Warnings
    -W ignore::DeprecationWarning
    # Coverage
    --cov=backend
    --cov-report=term-missing
    --cov-report=html
    --cov-report=xml
    # Parallel execution (optional, comment out if issues)
    # -n auto

# Markers for categorizing tests
markers =
    unit: Unit tests (fast, isolated)
    integration: Integration tests (slower, multiple components)
    emulator: Emulator tests (testing emulation layer)
    security: Security audit tests
    slow: Slow-running tests
    fast: Fast-running tests (< 1 second)
    requires_api_key: Tests requiring ANTHROPIC_API_KEY

# Asyncio mode
asyncio_mode = auto

# Logging
log_cli = false
log_cli_level = INFO
log_cli_format = %(asctime)s [%(levelname)8s] %(message)s
log_cli_date_format = %Y-%m-%d %H:%M:%S

# Timeout (in seconds)
timeout = 300

# Coverage options
[coverage:run]
source = backend
omit =
    */tests/*
    */test_*.py
    */__pycache__/*
    */site-packages/*

[coverage:report]
precision = 2
show_missing = true
skip_covered = false

exclude_lines =
    # Standard pragma
    pragma: no cover
    # Don't complain about missing debug code
    def __repr__
    # Don't complain if tests don't hit defensive assertion code
    raise AssertionError
    raise NotImplementedError
    # Don't complain if non-runnable code isn't run
    if __name__ == .__main__.:
    # Don't complain about abstract methods
    @abstractmethod
